package fr.thumbnailsdb;

import fr.thumbnailsdb.candidates.Candidate;
import fr.thumbnailsdb.lsh.PersistentLSH;
import org.apache.commons.io.FileUtils;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.io.File;
import java.util.List;

/**
 * Created by mohannad on 05/12/15.
 */
public class PersistentLSHTest {
    PersistentLSH persistentLSH;
    String[] input;
    @BeforeClass
    public void init(){
        input = new String[]{
                "1,0000000000000000000000000000000000100000110010111111000100111101111111111011111111111111111111111111",
                "2,1111111111110111101111110010011111011111111001111111101011111110000001111000001011111111111111111111",
                "3,0000100000000101000000000010001000000000100011001110011110111101101001110111100100111111011110111111",
                "4,1111111101111111110001111011100110011110011000011000100111100001000001000100001000001000100001010010",
                "5,1101111111111011111111111111111111110111111100111111110001111111000111000011111100000000110000000000",
                "6,1111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000",
                "7,0000100000000101000000000010001000000000100011001110011110111101101001110111100100111111011110111111",
                "8,1111110000011111100001111111000011111100101111100001111111000111111100011111110001011110000111111100",
                "9,0011111001101111100101110101101111001100110101010011010100101111111011011101000001111011001011111100",
                "10,1111111111111111111111111101111110100011111000000111111100001100000011110001111101111111000111111111",
                "11,1111111111111111111111111101111110100011111000000111111100001100000011110001111101111111000111111111",
                "12,0000000000111010000011111100101111100011111000000111100000011110000101111000000111111000001111111111",
                "13,0000000000111010000011111100101111100011111000000111100000011110000101111000000111111000001111111111",
                "14,0010011000000011000000010000000111111111011111111111111111111001011111110011011100000010100000000110",
                "15,1110000111110000001111011100111000101011100111100110011110011000111001001011101111111111111111111111",
                "16,1111111111011111111101111011111000011111100001101110000111111111011111111111111100000000010000000000",
                "17,1110000111110000001111011100111000101011100111100110011110011000111001001011101111111111111111111111",
                "18,1110000011110000000111011110011101111101110101100111010011011101000101111110001111100001111110001111",
                "19,0000000000111010000011111100101111100011111000000111100000011110000101111000000111111000001111111111",
                "20,1111111111111111111111111101111110100011111000000111111100001100000011110001111101111111000111111111",
                "21,0010011000000011000000010000000111111111011111111111111111111001011111110011011100000010100000000110",
                "22,0000000100001111101000111111001010110101101011011111011110111101111111111011111111100000111111000111",
                "23,1111111111111000111110110011111010111111100010000110100001011000000001101100000111000000011111111111",
                "25,1111111111110111101111110010011111011111111001111111101011111110000001111000001011111111111111111111",
                "26,0000000100001111101000111111001010110101101011011111011110111101111111111011111111100000111111000111",
                "27,1110000111110000001111011100111000101011100111100110011110011000111001001011101111111111111111111111",
                "28,0000000100001111101000111111001010110101101011011111011110111101111111111011111111100000111111000111",
                "29,1111111111111111111111111001111111000011101000000010010000001010000000011110010000000110000100011000",
                "30,1111001111110000001111011110111001000011110101101110101110111111111011010111100110000000000000011101"
        };
        persistentLSH = new PersistentLSH(5, 15, 100);
    }
    @AfterClass
    public void clean(){
        persistentLSH.clear();
        persistentLSH = null;
        input = null;
        try{
            FileUtils.deleteDirectory(new File("lsh"));
            FileUtils.deleteDirectory(new File("lsh.p"));
            FileUtils.deleteDirectory(new File("lsh.t"));
        } catch (Exception e) {

        }
    }
    @Test
    public void testExists(){
        boolean found = false;
        File f1 = new File("lsh");
        File f2 = new File("lsh.p");
        File f3 = new File("lsh.t");
        found = (f1.exists() && f2.exists() && f3.exists());
        Assert.assertTrue(found);
    }
    @Test(dependsOnMethods={"testExists"})
    public void testAdd(){
        persistentLSH.clear();
        for (int i = 0; i < input.length; i++) {
            String[] tokens = input[i].split(",");
            persistentLSH.add(tokens[1], Integer.parseInt(tokens[0]));
        }
        Assert.assertEquals(persistentLSH.size(),input.length);
    }
    @Test(dependsOnMethods={"testAdd"})
    public void testLookupCandidates(){
        String hash[] ={
                "0000000000000000000000000000000000100000110010111111000100111101111111111011111111111111111111111111",
                "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        };

        List<Candidate> result = persistentLSH.lookupCandidates(hash[0]);
        Assert.assertEquals(result.size(),1);
        result = persistentLSH.lookupCandidates(hash[1]);
        Assert.assertEquals(result.size(),0);

    }
    @Test(dependsOnMethods={"testLookupCandidates"})
    public void testClear(){
        persistentLSH.clear();
        Assert.assertEquals(persistentLSH.size(),0);
    }
}
